@page
@using TBSExam.Models.Models;
@model DevExpress.UI.Pages.GeneradorFolios.FoliosModel
@{
}

<head>
    <link rel="stylesheet" type="text/css" href="~/css/own/general-style.css">
    <link rel="stylesheet" type="text/css" href="~/css/own/folio-style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="~/js/devextreme/jszip.js"></script>
</head>

<h2>Folios</h2>

<div class="centrar-folio">
    <div class="folio-container">
        @using (Html.BeginForm())
        {
            <div class="folio-textbox-container">
                @(Html.DevExtreme().TextBoxFor(m => m.FolioInicial)
                    .Placeholder("Folio Inicial")
                )
            </div>
            <div class="folio-textbox-container">
                @(Html.DevExtreme().TextBoxFor(m => m.FolioFinal)
                    .Placeholder("Folio Final")
                    )
            </div>
            <div class="folio-textbox-container">
                @(Html.DevExtreme().Button()
                    .ID("button")
                    .Width("100%")
                    .Text("Generar")
                    .Type(ButtonType.Success)
                    .UseSubmitBehavior(true)
                )
                @(Html.DevExtreme().ValidationSummary()
                    .ID("summary")
                    )
            </div>
        }
    </div>
</div>

@(Html.DevExtreme().DataGrid<Folio>()
    .ID("gridContainer")
    .Export(e => e.Enabled(true))
    .ShowBorders(true)
    .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .Paging(p => p.PageSize(6))
    .Pager(pager =>
    {
        pager.Visible(true);
        pager.DisplayMode(GridPagerDisplayMode.Full);
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new JS("[5, 10, 'all']"));
        pager.ShowInfo(true);
        pager.ShowNavigationButtons(true);
    })
    .OnExporting("exporting")
    .Columns(columns =>
    {

        columns.AddFor(m => m.folio_id)
            .Alignment(HorizontalAlignment.Center)
            .AllowHeaderFiltering(false);

        columns.AddFor(m => m.disponible)
            .Alignment(HorizontalAlignment.Center);
    })
    .DataSource(d => d.Mvc()
        .Controller("Folio")
        .LoadAction("Get")
        .InsertAction("Create")
        .Key("folio_id")
    )
)

<script>
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Folios');
        let nombre = 'Karim';
        const date = new Date;
        const dia = date.getDate();
        const mes = date.getMonth() + 1;
        const anio = date.getFullYear();
        let docName = nombre + '_' + dia + '/' + mes + '/' + anio + '.xlsx';

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), docName);
            });
        });
    }
</script>