@page
@using TBSExam.Models.Models;
@model DevExpress.UI.Pages.GeneradorFolios.FoliosModel
@{
}

<head>
    <link rel="stylesheet" type="text/css" href="~/css/own/general-style.css">
    <link rel="stylesheet" type="text/css" href="~/css/own/folio-style.css">
</head>

<h2>Folios</h2>

<div class="centrar-folio">
    <div class="folio-container">
        @using (Html.BeginForm())
        {
            <div class="folio-textbox-container">
                @(Html.DevExtreme().TextBoxFor(m => m.FolioInicial)
                    .Placeholder("Folio Inicial")
                )
            </div>
            <div class="folio-textbox-container">
                @(Html.DevExtreme().TextBoxFor(m => m.FolioFinal)
                    .Placeholder("Folio Final")
                    )
            </div>
            <div class="folio-textbox-container">
                @(Html.DevExtreme().Button()
                    .ID("button")
                    .Width("100%")
                    .Text("Generar")
                    .Type(ButtonType.Success)
                    .UseSubmitBehavior(true)
                )
                @(Html.DevExtreme().ValidationSummary()
                    .ID("summary")
                    )
            </div>
        }
    </div>
</div>

@(Html.DevExtreme().DataGrid<Folio>()
    .ID("gridContainer")
    .Export(e => e.Enabled(true))
    .ShowBorders(true)
    .Paging(p => p.PageSize(6))
    .OnExporting("exporting")
    .Columns(columns =>
    {

        columns.AddFor(m => m.folio_id);

        columns.AddFor(m => m.disponible);
    })
    .DataSource(d => d.Mvc()
        .Controller("Folio")
        .LoadAction("Get")
        .InsertAction("Create")
        .Key("folio_id")
    )
)

<script>
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Folio');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Folios.xlsx');
            });
        });
    }
</script>